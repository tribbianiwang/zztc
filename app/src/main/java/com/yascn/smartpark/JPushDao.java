package com.yascn.smartpark;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yascn.smartpark.bean.JPush;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JPUSH".
*/
public class JPushDao extends AbstractDao<JPush, Long> {

    public static final String TABLENAME = "JPUSH";

    /**
     * Properties of entity JPush.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property NUMBER = new Property(2, String.class, "NUMBER", false, "NUMBER");
        public final static Property MONEY = new Property(3, String.class, "MONEY", false, "MONEY");
        public final static Property PARKING_ID = new Property(4, String.class, "PARKING_ID", false, "PARKING__ID");
        public final static Property PARK_TIME = new Property(5, String.class, "PARK_TIME", false, "PARK__TIME");
        public final static Property FLAG = new Property(6, String.class, "FLAG", false, "FLAG");
        public final static Property NAME = new Property(7, String.class, "NAME", false, "NAME");
    };


    public JPushDao(DaoConfig config) {
        super(config);
    }
    
    public JPushDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JPUSH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"NUMBER\" TEXT," + // 2: NUMBER
                "\"MONEY\" TEXT," + // 3: MONEY
                "\"PARKING__ID\" TEXT," + // 4: PARKING_ID
                "\"PARK__TIME\" TEXT," + // 5: PARK_TIME
                "\"FLAG\" TEXT," + // 6: FLAG
                "\"NAME\" TEXT);"); // 7: NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JPUSH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JPush entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime());
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(3, NUMBER);
        }
 
        String MONEY = entity.getMONEY();
        if (MONEY != null) {
            stmt.bindString(4, MONEY);
        }
 
        String PARKING_ID = entity.getPARKING_ID();
        if (PARKING_ID != null) {
            stmt.bindString(5, PARKING_ID);
        }
 
        String PARK_TIME = entity.getPARK_TIME();
        if (PARK_TIME != null) {
            stmt.bindString(6, PARK_TIME);
        }
 
        String FLAG = entity.getFLAG();
        if (FLAG != null) {
            stmt.bindString(7, FLAG);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(8, NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JPush entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTime());
 
        String NUMBER = entity.getNUMBER();
        if (NUMBER != null) {
            stmt.bindString(3, NUMBER);
        }
 
        String MONEY = entity.getMONEY();
        if (MONEY != null) {
            stmt.bindString(4, MONEY);
        }
 
        String PARKING_ID = entity.getPARKING_ID();
        if (PARKING_ID != null) {
            stmt.bindString(5, PARKING_ID);
        }
 
        String PARK_TIME = entity.getPARK_TIME();
        if (PARK_TIME != null) {
            stmt.bindString(6, PARK_TIME);
        }
 
        String FLAG = entity.getFLAG();
        if (FLAG != null) {
            stmt.bindString(7, FLAG);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(8, NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public JPush readEntity(Cursor cursor, int offset) {
        JPush entity = new JPush( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NUMBER
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MONEY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PARKING_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PARK_TIME
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FLAG
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JPush entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setNUMBER(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMONEY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPARKING_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPARK_TIME(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFLAG(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNAME(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JPush entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JPush entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
