package com.yascn.smartpark;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yascn.smartpark.bean.SearchHistoryDaoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_HISTORY_DAO_BEAN".
*/
public class SearchHistoryDaoBeanDao extends AbstractDao<SearchHistoryDaoBean, Long> {

    public static final String TABLENAME = "SEARCH_HISTORY_DAO_BEAN";

    /**
     * Properties of entity SearchHistoryDaoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LNG = new Property(1, String.class, "LNG", false, "LNG");
        public final static Property PARKING_ID = new Property(2, String.class, "PARKING_ID", false, "PARKING__ID");
        public final static Property ADDRESS = new Property(3, String.class, "ADDRESS", false, "ADDRESS");
        public final static Property COLLECTION_ID = new Property(4, String.class, "COLLECTION_ID", false, "COLLECTION__ID");
        public final static Property FREE_NUM = new Property(5, String.class, "FREE_NUM", false, "FREE__NUM");
        public final static Property LAT = new Property(6, String.class, "LAT", false, "LAT");
        public final static Property NAME = new Property(7, String.class, "NAME", false, "NAME");
    };


    public SearchHistoryDaoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryDaoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_HISTORY_DAO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LNG\" TEXT," + // 1: LNG
                "\"PARKING__ID\" TEXT," + // 2: PARKING_ID
                "\"ADDRESS\" TEXT," + // 3: ADDRESS
                "\"COLLECTION__ID\" TEXT," + // 4: COLLECTION_ID
                "\"FREE__NUM\" TEXT," + // 5: FREE_NUM
                "\"LAT\" TEXT," + // 6: LAT
                "\"NAME\" TEXT);"); // 7: NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_HISTORY_DAO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchHistoryDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LNG = entity.getLNG();
        if (LNG != null) {
            stmt.bindString(2, LNG);
        }
 
        String PARKING_ID = entity.getPARKING_ID();
        if (PARKING_ID != null) {
            stmt.bindString(3, PARKING_ID);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(4, ADDRESS);
        }
 
        String COLLECTION_ID = entity.getCOLLECTION_ID();
        if (COLLECTION_ID != null) {
            stmt.bindString(5, COLLECTION_ID);
        }
 
        String FREE_NUM = entity.getFREE_NUM();
        if (FREE_NUM != null) {
            stmt.bindString(6, FREE_NUM);
        }
 
        String LAT = entity.getLAT();
        if (LAT != null) {
            stmt.bindString(7, LAT);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(8, NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchHistoryDaoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String LNG = entity.getLNG();
        if (LNG != null) {
            stmt.bindString(2, LNG);
        }
 
        String PARKING_ID = entity.getPARKING_ID();
        if (PARKING_ID != null) {
            stmt.bindString(3, PARKING_ID);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(4, ADDRESS);
        }
 
        String COLLECTION_ID = entity.getCOLLECTION_ID();
        if (COLLECTION_ID != null) {
            stmt.bindString(5, COLLECTION_ID);
        }
 
        String FREE_NUM = entity.getFREE_NUM();
        if (FREE_NUM != null) {
            stmt.bindString(6, FREE_NUM);
        }
 
        String LAT = entity.getLAT();
        if (LAT != null) {
            stmt.bindString(7, LAT);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(8, NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchHistoryDaoBean readEntity(Cursor cursor, int offset) {
        SearchHistoryDaoBean entity = new SearchHistoryDaoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // LNG
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PARKING_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ADDRESS
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // COLLECTION_ID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FREE_NUM
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // LAT
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchHistoryDaoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLNG(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPARKING_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setADDRESS(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCOLLECTION_ID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFREE_NUM(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLAT(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNAME(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchHistoryDaoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchHistoryDaoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
